// Attend que tout le contenu de la page (DOM) soit charg√© avant d'ex√©cuter le script.
// C'est une bonne pratique pour s'assurer que tous les √©l√©ments HTML existent.
document.addEventListener('DOMContentLoaded', () => {

    // --- 1. R√âF√âRENCES AUX √âL√âMENTS HTML (DOM) ---
    // On stocke les √©l√©ments dans des constantes pour y acc√©der plus rapidement et facilement.
    const chatLauncher = document.getElementById('chat-launcher');
    const chatContainer = document.getElementById('chat-container');
    const closeChatButton = document.getElementById('close-chat-button');
    const langButtons = document.querySelectorAll('.lang-btn');
    const chatLog = document.getElementById('chat-log');
    const chatForm = document.getElementById('chat-form');
    const welcomeText = document.getElementById('welcome-text');
    const userInput = document.getElementById('user-input');
    const sendButton = document.getElementById('send-button');

    // --- 2. VARIABLES D'√âTAT DU CHATBOT ---
    // Ces variables permettent de suivre l'√©tat actuel du chat.
    let currentLanguage = null; // Sera 'fr' ou 'en' une fois la langue choisie.
    let etdiaData = null; // Contiendra la base de donn√©es (fr ou en) de la langue choisie.
    let isTyping = false; // Emp√™che l'utilisateur d'envoyer un message pendant que le bot "√©crit".
    let conversationLog = []; // NOUVEAU: Stocke l'historique de la conversation de mani√®re ind√©pendante de la langue.

    // --- 3. GESTIONNAIRES D'√âV√âNEMENTS ---
    // On "√©coute" les actions de l'utilisateur (clics, envoi de formulaire).

    // Ouvre/Ferme le chat quand on clique sur le lanceur.
    chatLauncher.addEventListener('click', toggleChat);
    // Ferme le chat quand on clique sur le bouton de fermeture dans l'en-t√™te.
    closeChatButton.addEventListener('click', toggleChat);

    // G√®re le choix de la langue. On boucle sur les deux boutons.
    langButtons.forEach(button => {
        button.addEventListener('click', () => {
            switchLanguage(button.dataset.lang);
        });
    });

    // G√®re l'envoi d'un message par l'utilisateur (via la touche "Entr√©e" ou le bouton d'envoi).
    chatForm.addEventListener('submit', (e) => {
        e.preventDefault(); // Emp√™che le comportement par d√©faut du formulaire (recharger la page).
        handleUserSubmit();
    });

    // G√®re le clic sur un bouton de suggestion dans le chat.
    // C'est une "d√©l√©gation d'√©v√©nement" : on √©coute les clics sur toute la zone de chat.
    chatLog.addEventListener('click', (e) => {
        // On v√©rifie si l'√©l√©ment cliqu√© est bien un bouton de suggestion.
        if (e.target.classList.contains('suggestion-btn')) {
            const question = e.target.textContent; // On traite la suggestion cliqu√©e comme une nouvelle soumission de l'utilisateur.
            handleUserSubmit(question);
        }
    });

    // --- 4. FONCTIONS PRINCIPALES ---

    /**
     * Affiche ou cache la fen√™tre de chat et le lanceur.
     */
    function toggleChat() {
        // Si le chat est sur le point d'√™tre ouvert (il est actuellement cach√©)
        // et qu'aucune langue n'a encore √©t√© d√©finie, c'est la toute premi√®re initialisation.
        if (chatContainer.classList.contains('hidden') && !currentLanguage) {
            // On rend le formulaire visible et on active les boutons/champs.
            chatForm.classList.remove('hidden');
            userInput.disabled = false;
            sendButton.disabled = false;

            // On initialise la langue en fran√ßais par d√©faut.
            switchLanguage('fr', true); // Le 'true' emp√™che la notification au premier lancement.
        }

        // On bascule la visibilit√© du conteneur de chat et du lanceur.
        chatContainer.classList.toggle('hidden');
        chatLauncher.classList.toggle('hidden');
    }


    /**
     * Change la langue du chatbot et retraduit toute la conversation.
     * @param {string} lang - La nouvelle langue ('fr' ou 'en').
     * @param {boolean} isInitial - Indique si c'est le premier chargement (pour ne pas afficher de notif).
     */
    function switchLanguage(lang, isInitial = false) {
        // Si on clique sur la langue d√©j√† active, on ne fait rien.
        if (lang === currentLanguage) return;
    
        currentLanguage = lang;
        // On charge la bonne base de donn√©es en fonction du choix.
        etdiaData = (lang === 'fr') ? etdiaContent_fr : etdiaContent_en;
    
        // Met √† jour le style des boutons de langue pour montrer lequel est actif.
        langButtons.forEach(btn => {
            btn.classList.toggle('active', btn.dataset.lang === lang);
        });
    
        // Met √† jour le texte du message de bienvenue d√©filant.
        updateWelcomeMessage();
    
        // NOUVEAU: On re-g√©n√®re tout le contenu du chat dans la nouvelle langue.
        renderFullChat();
    
        // Affiche une notification de changement de langue, sauf au premier chargement.
        if (!isInitial) {
            const notificationText = (lang === 'fr') ? "La langue a √©t√© chang√©e en Fran√ßais." : "Language switched to English.";
            // Cette notification est temporaire et n'est pas ajout√©e √† l'historique.
            addMessage(notificationText, 'bot');
        }
    }

    /**
     * NOUVEAU: Re-g√©n√®re l'int√©gralit√© du chat log √† partir de l'historique `conversationLog`.
     */
    function renderFullChat() {
        chatLog.innerHTML = ''; // On vide le chat actuel.

        conversationLog.forEach(entry => {
            if (entry.type === 'user') {
                addMessage(entry.text, 'user');
            } else if (entry.type === 'bot') {
                // Si c'est une suggestion, on la reg√©n√®re.
                if (entry.suggestionFor) {
                    const suggestions = findSuggestions(entry.suggestionFor);
                    const suggestionText = (currentLanguage === 'fr') ? "Je n'ai pas bien compris votre question. Vouliez-vous dire :" : "I didn't quite understand your question. Did you mean:";
                    let suggestionHtml = `<p>${suggestionText}</p>`;
                    suggestions.forEach(sugg => {
                        suggestionHtml += `<button class="suggestion-btn">${sugg.question_phrases[0]}</button>`;
                    });
                    addMessage(suggestionHtml, 'bot', true);
                } else { // Sinon, c'est une r√©ponse standard bas√©e sur un ID.
                    const dataEntry = etdiaData.find(item => item.id === entry.id);
                    if (dataEntry) {
                        addMessage(dataEntry.answer, 'bot', true);
                    }
                }
            }
        });
    }

    /**
     * Met √† jour le texte du message de bienvenue d√©filant.
     */
    function updateWelcomeMessage() {
        welcomeText.textContent = (currentLanguage === 'fr')
            ? "Bonjour et bienvenue, dans notre site web et dans notre chatbot EtdIA qui est moi. Bonne d√©marches avec Etudencia et surtout bonne chance pour ton projet d'√©tude en France. Je suis pour t'aider √† r√©ussir ton projet. N'h√©sitez pas √† me poser vos questions. Ton assistant EtdIA"
            : "Hello and welcome to our website and to our chatbot, EtdIA, which is me. I wish you good luck with your studies in France, especially with Etudencia. I'm here to help you succeed. Don't hesitate to ask me any questions. Your EtdIA assistant.";
    }

    /**
     * G√®re la soumission du message de l'utilisateur.
     * @param {string} [forcedMessage] - Un message forc√© (utilis√© par les boutons de suggestion).
     */
    function handleUserSubmit(forcedMessage = null) {
        const messageText = forcedMessage || userInput.value.trim(); // On r√©cup√®re le texte et on enl√®ve les espaces inutiles.
        if (messageText === '' || isTyping) return; // Si le message est vide ou si le bot √©crit, on ne fait rien.

        // NOUVEAU: On ajoute le message √† l'historique avant de l'afficher.
        conversationLog.push({ type: 'user', text: messageText });
        addMessage(messageText, 'user'); // Affiche le message de l'utilisateur.
        
        // On ne vide le champ que si ce n'est pas un message forc√© (venant d'un clic).
        if (!forcedMessage) {
            userInput.value = ''; // Vide le champ de saisie.
        }
        getBotResponse(messageText); // Demande une r√©ponse au bot.
    }

    /**
     * Ajoute un message √† la fen√™tre de chat. C'est la fonction centrale pour l'affichage.
     * @param {string} text - Le contenu du message.
     * @param {string} sender - 'user' ou 'bot'.
     * @param {boolean} isHtml - Indique si le texte contient du HTML √† interpr√©ter (pour les liens, etc.).
     */
    function addMessage(text, sender, isHtml = false) {
        const messageWrapper = document.createElement('div');
        messageWrapper.classList.add('message', `${sender}-message`);

        // D√©finit le profil (image/emoji et nom) en fonction de l'exp√©diteur.
        const profilePicSrc = (sender === 'bot') ? 'assets/robot.png' : 'üßë';
        const profileName = (sender === 'bot') ? 'EtdIA' : (currentLanguage === 'fr' ? 'Vous' : 'You');

        // Cr√©e la structure HTML compl√®te du message avec le profil.
        messageWrapper.innerHTML = `
            <div class="profile">
                <div class="profile-pic">${sender === 'bot' ? `<img src="${profilePicSrc}" alt="robot icon">` : profilePicSrc}</div>
                <span class="profile-name">${profileName}</span>
            </div>
            <div class="message-content"></div>
        `;

        const messageContentDiv = messageWrapper.querySelector('.message-content');
        
        // Ajoute le message complet au log de chat.
        chatLog.appendChild(messageWrapper);

        // G√®re l'affichage du texte (normal ou HTML).
        if (isHtml) {
            messageContentDiv.innerHTML = text; // Interpr√®te le HTML.
        } else {
            messageContentDiv.textContent = text; // Affiche comme du texte simple (plus s√©curis√©).
        }

        // Fait d√©filer automatiquement vers le bas pour voir le dernier message.
        chatLog.scrollTop = chatLog.scrollHeight;
    }

    /**
     * Trouve et affiche la r√©ponse du bot. C'est le "cerveau" principal.
     * @param {string} userMessage - Le message de l'utilisateur.
     */
    function getBotResponse(userMessage) {
        const lowerCaseMessage = userMessage.toLowerCase().trim();
        isTyping = true;
        userInput.disabled = true;
        sendButton.disabled = true;

        // Simule un temps de r√©flexion du bot pour un effet plus naturel.
        setTimeout(() => {
            // 1. Chercher une salutation.
            let response = findResponse(lowerCaseMessage, "greeting");
            
            // 2. Si ce n'est pas une salutation, chercher une r√©ponse directe (correspondance exacte).
            if (!response) {
                response = findResponse(lowerCaseMessage);
            }

            // 3. Si une r√©ponse directe est trouv√©e, on l'affiche.
            if (response) {
                // NOUVEAU: On ajoute la r√©ponse √† l'historique.
                conversationLog.push({ type: 'bot', id: response.id });
                addMessage(response.answer, 'bot', true); // 'true' pour permettre les liens HTML.
            } else {
                // 4. Si aucune r√©ponse directe, on cherche des suggestions bas√©es sur les mots-cl√©s.
                const suggestions = findSuggestions(lowerCaseMessage);
                if (suggestions.length > 0) {
                    // NOUVEAU: On ajoute la demande de suggestion √† l'historique.
                    conversationLog.push({ type: 'bot', suggestionFor: lowerCaseMessage });

                    const suggestionText = (currentLanguage === 'fr')
                        ? "Je n'ai pas bien compris votre question. Vouliez-vous dire :"
                        : "I didn't quite understand your question. Did you mean:";
                    
                    let suggestionHtml = `<p>${suggestionText}</p>`;
                    suggestions.forEach(sugg => {
                        // On prend la premi√®re phrase de la liste comme suggestion cliquable.
                        suggestionHtml += `<button class="suggestion-btn">${sugg.question_phrases[0]}</button>`;
                    });
                    addMessage(suggestionHtml, 'bot', true);
                } else {
                    // 5. Si aucune suggestion n'est trouv√©e, on affiche le message par d√©faut.
                    // NOUVEAU: On ajoute le fallback √† l'historique.
                    conversationLog.push({ type: 'bot', id: 'fallback' });
                    const fallbackResponse = etdiaData.find(item => item.id === 'fallback');
                    addMessage(fallbackResponse.answer, 'bot');
                }
            }

            // Une fois la r√©ponse donn√©e, on r√©active la saisie pour l'utilisateur.
            isTyping = false;
            userInput.disabled = false;
            sendButton.disabled = false;
            userInput.focus();
        }, 800); // D√©lai de 800ms.
    }

    /**
     * Cherche une r√©ponse directe dans la base de donn√©es (correspondance exacte).
     * @param {string} message - Le message de l'utilisateur en minuscules.
     * @param {string} [type] - Optionnel, pour chercher un type sp√©cifique (ex: "greeting").
     * @returns {object|null} - L'objet de r√©ponse trouv√© ou null.
     */
    function findResponse(message, type = null) {
        for (const item of etdiaData) {
            // Si on cherche un type sp√©cifique (comme "greeting"), on ignore les autres.
            if (type && item.type !== type) continue;
            
            // V√©rifie si une des phrases de question de la base de donn√©es correspond exactement au message de l'utilisateur.
            if (item.question_phrases && item.question_phrases.includes(message)) {
                return item; // On a trouv√© une correspondance, on retourne l'objet complet.
            }
        }
        return null; // Aucune correspondance trouv√©e.
    }

    /**
     * Trouve des suggestions pertinentes bas√©es sur les mots-cl√©s du message de l'utilisateur.
     * @param {string} message - Le message de l'utilisateur en minuscules.
     * @returns {Array} - Une liste d'objets de suggestion, tri√©e par pertinence.
     */
    function findSuggestions(message) {
        // On nettoie la ponctuation simple et on s√©pare le message en mots.
        const userKeywords = message.replace(/[?,.!-]/g, '').split(/\s+/);
        const suggestions = [];

        etdiaData.forEach(item => {
            // On ne sugg√®re pas les salutations ou les messages par d√©faut.
            if (item.type === 'greeting' || item.id === 'fallback') return;

            let matchScore = 0;
            // On compare chaque mot de l'utilisateur avec les mots-cl√©s de chaque entr√©e de la base de donn√©es.
            userKeywords.forEach(userWord => {
                if (userWord.length > 2 && item.keywords.includes(userWord)) { // On ignore les petits mots.
                    matchScore++;
                }
            });

            // Si au moins un mot-cl√© correspond, on ajoute l'entr√©e √† la liste des suggestions.
            if (matchScore > 0) {
                suggestions.push({ ...item, score: matchScore });
            }
        });

        // Trie les suggestions par score (du plus pertinent au moins pertinent).
        suggestions.sort((a, b) => b.score - a.score);

        // Retourne les 10 meilleures suggestions au maximum, comme demand√©.
        return suggestions.slice(0, 10);
    }
});
